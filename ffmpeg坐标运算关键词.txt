abs(x)
Compute absolute value of x.

acos(x)
Compute arccosine of x.

asin(x)
Compute arcsine of x.

atan(x)
Compute arctangent of x.

atan2(x, y)
Compute principal value of the arc tangent of y/x.

between(x, min, max)
Return 1 if x is greater than or equal to min and lesser than or equal to max, 0 otherwise.

bitand(x, y)
bitor(x, y)
Compute bitwise and/or operation on x and y.

The results of the evaluation of x and y are converted to integers before executing the bitwise operation.

Note that both the conversion to integer and the conversion back to floating point can lose precision. Beware of unexpected results for large numbers (usually 2^53 and larger).

ceil(expr)
Round the value of expression expr upwards to the nearest integer. For example, "ceil(1.5)" is "2.0".

clip(x, min, max)
Return the value of x clipped between min and max.

cos(x)
Compute cosine of x.

cosh(x)
Compute hyperbolic cosine of x.

eq(x, y)
Return 1 if x and y are equivalent, 0 otherwise.

exp(x)
Compute exponential of x (with base e, the Euler’s number).

floor(expr)
Round the value of expression expr downwards to the nearest integer. For example, "floor(-1.5)" is "-2.0".

gauss(x)
Compute Gauss function of x, corresponding to exp(-x*x/2) / sqrt(2*PI).

gcd(x, y)
Return the greatest common divisor of x and y. If both x and y are 0 or either or both are less than zero then behavior is undefined.

gt(x, y)
Return 1 if x is greater than y, 0 otherwise.

gte(x, y)
Return 1 if x is greater than or equal to y, 0 otherwise.

hypot(x, y)
This function is similar to the C function with the same name; it returns "sqrt(x*x + y*y)", the length of the hypotenuse of a right triangle with sides of length x and y, or the distance of the point (x, y) from the origin.

if(x, y)
Evaluate x, and if the result is non-zero return the result of the evaluation of y, return 0 otherwise.

if(x, y, z)
Evaluate x, and if the result is non-zero return the evaluation result of y, otherwise the evaluation result of z.

ifnot(x, y)
Evaluate x, and if the result is zero return the result of the evaluation of y, return 0 otherwise.

ifnot(x, y, z)
Evaluate x, and if the result is zero return the evaluation result of y, otherwise the evaluation result of z.

isinf(x)
Return 1.0 if x is +/-INFINITY, 0.0 otherwise.

isnan(x)
Return 1.0 if x is NAN, 0.0 otherwise.

ld(var)
Load the value of the internal variable with number var, which was previously stored with st(var, expr). The function returns the loaded value.

lerp(x, y, z)
Return linear interpolation between x and y by amount of z.

log(x)
Compute natural logarithm of x.

lt(x, y)
Return 1 if x is lesser than y, 0 otherwise.

lte(x, y)
Return 1 if x is lesser than or equal to y, 0 otherwise.

max(x, y)
Return the maximum between x and y.

min(x, y)
Return the minimum between x and y.

mod(x, y)
Compute the remainder of division of x by y.

not(expr)
Return 1.0 if expr is zero, 0.0 otherwise.

pow(x, y)
Compute the power of x elevated y, it is equivalent to "(x)^(y)".

print(t)
print(t, l)
Print the value of expression t with loglevel l. If l is not specified then a default log level is used. Returns the value of the expression printed.

Prints t with loglevel l

random(x)
Return a pseudo random value between 0.0 and 1.0. x is the index of the internal variable which will be used to save the seed/state.

root(expr, max)
Find an input value for which the function represented by expr with argument ld(0) is 0 in the interval 0..max.

The expression in expr must denote a continuous function or the result is undefined.

ld(0) is used to represent the function input value, which means that the given expression will be evaluated multiple times with various input values that the expression can access through ld(0). When the expression evaluates to 0 then the corresponding input value will be returned.

round(expr)
Round the value of expression expr to the nearest integer. For example, "round(1.5)" is "2.0".

sgn(x)
Compute sign of x.

sin(x)
Compute sine of x.

sinh(x)
Compute hyperbolic sine of x.

sqrt(expr)
Compute the square root of expr. This is equivalent to "(expr)^.5".

squish(x)
Compute expression 1/(1 + exp(4*x)).

st(var, expr)
Store the value of the expression expr in an internal variable. var specifies the number of the variable where to store the value, and it is a value ranging from 0 to 9. The function returns the value stored in the internal variable. Note, Variables are currently not shared between expressions.

tan(x)
Compute tangent of x.

tanh(x)
Compute hyperbolic tangent of x.

taylor(expr, x)
taylor(expr, x, id)
Evaluate a Taylor series at x, given an expression representing the ld(id)-th derivative of a function at 0.

When the series does not converge the result is undefined.

ld(id) is used to represent the derivative order in expr, which means that the given expression will be evaluated multiple times with various input values that the expression can access through ld(id). If id is not specified then 0 is assumed.

Note, when you have the derivatives at y instead of 0, taylor(expr, x-y) can be used.

time(0)
Return the current (wallclock) time in seconds.

trunc(expr)
Round the value of expression expr towards zero to the nearest integer. For example, "trunc(-1.5)" is "-1.0".

while(cond, expr)
Evaluate expression expr while the expression cond is non-zero, and returns the value of the last expr evaluation, or NAN if cond was always false.

The following constants are available:

PI
area of the unit disc, approximately 3.14

E
exp(1) (Euler’s number), approximately 2.718

PHI
golden ratio (1+sqrt(5))/2, approximately 1.618